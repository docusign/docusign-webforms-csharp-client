/* 
 * Web Forms API version 1.1
 *
 * The Web Forms API facilitates generating semantic HTML forms around everyday contracts. 
 *
 * OpenAPI spec version: 1.1.0
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using DocuSign.WebForms.Client;
using DocuSign.WebForms.Model;

namespace DocuSign.WebForms.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFormInstanceManagementApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates an instance of the web form
        /// </summary>
        /// <remarks>
        /// Creates an instance of the web form.
        /// </remarks>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the web form resides</param>
        /// <param name="formId">Unique identifier for a web form entity that is consistent for it&#39;s lifetime</param>
        /// <param name="createInstanceBody">Request body containing properties that will be used to create instance.</param>
        /// <returns></returns>
        WebFormInstance CreateInstance(string accountId, string formId, CreateInstanceRequestBody createInstanceBody);

        /// <summary>
        /// Creates an instance of the web form
        /// </summary>
        /// <remarks>
        /// Creates an instance of the web form.
        /// </remarks>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the web form resides</param>
        /// <param name="formId">Unique identifier for a web form entity that is consistent for it&#39;s lifetime</param>
        /// <param name="createInstanceBody">Request body containing properties that will be used to create instance.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<WebFormInstance> CreateInstanceWithHttpInfo(string accountId, string formId, CreateInstanceRequestBody createInstanceBody);
        /// <summary>
        /// Get form instance
        /// </summary>
        /// <remarks>
        /// Retrieves instance information filter by instance id
        /// </remarks>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the web form resides</param>
        /// <param name="formId">Unique identifier for a web form entity that is consistent for it&#39;s lifetime</param>
        /// <param name="instanceId">Unique identifier for a Web Form Instance that is consistent until its expiration</param>
        /// <returns></returns>
        WebFormInstance GetInstance(string accountId, string formId, string instanceId);

        /// <summary>
        /// Get form instance
        /// </summary>
        /// <remarks>
        /// Retrieves instance information filter by instance id
        /// </remarks>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the web form resides</param>
        /// <param name="formId">Unique identifier for a web form entity that is consistent for it&#39;s lifetime</param>
        /// <param name="instanceId">Unique identifier for a Web Form Instance that is consistent until its expiration</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<WebFormInstance> GetInstanceWithHttpInfo(string accountId, string formId, string instanceId);
        /// <summary>
        /// List instances
        /// </summary>
        /// <remarks>
        /// List all the instances of a web form in an account. When filtered by clientUserId, it will return instances having same clientUserId
        /// </remarks>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the web form resides</param>
        /// <param name="formId">Unique identifier for a web form that is consistent for it&#39;s lifetime</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        WebFormInstanceList ListInstances(string accountId, string formId, FormInstanceManagementApi.ListInstancesOptions options = null);

        /// <summary>
        /// List instances
        /// </summary>
        /// <remarks>
        /// List all the instances of a web form in an account. When filtered by clientUserId, it will return instances having same clientUserId
        /// </remarks>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the web form resides</param>
        /// <param name="formId">Unique identifier for a web form that is consistent for it&#39;s lifetime</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<WebFormInstanceList> ListInstancesWithHttpInfo(string accountId, string formId, FormInstanceManagementApi.ListInstancesOptions options = null);
        /// <summary>
        /// Refreshes the instance token
        /// </summary>
        /// <remarks>
        /// Generates new instance token for the existing Web Form Instance.
        /// </remarks>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the web form resides</param>
        /// <param name="formId">Unique identifier for a web form entity that is consistent for it&#39;s lifetime</param>
        /// <param name="instanceId">Unique identifier for a Web Form Instance that is consistent until its expiration</param>
        /// <returns></returns>
        WebFormInstance RefreshToken(string accountId, string formId, string instanceId);

        /// <summary>
        /// Refreshes the instance token
        /// </summary>
        /// <remarks>
        /// Generates new instance token for the existing Web Form Instance.
        /// </remarks>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the web form resides</param>
        /// <param name="formId">Unique identifier for a web form entity that is consistent for it&#39;s lifetime</param>
        /// <param name="instanceId">Unique identifier for a Web Form Instance that is consistent until its expiration</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<WebFormInstance> RefreshTokenWithHttpInfo(string accountId, string formId, string instanceId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates an instance of the web form
        /// </summary>
        /// <remarks>
        /// Creates an instance of the web form.
        /// </remarks>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the web form resides</param>
        /// <param name="formId">Unique identifier for a web form entity that is consistent for it&#39;s lifetime</param>
        /// <param name="createInstanceBody">Request body containing properties that will be used to create instance.</param>
        /// <returns>Task of WebFormInstance</returns>
        System.Threading.Tasks.Task<WebFormInstance> CreateInstanceAsync(string accountId, string formId, CreateInstanceRequestBody createInstanceBody);

        /// <summary>
        /// Creates an instance of the web form
        /// </summary>
        /// <remarks>
        /// Creates an instance of the web form.
        /// </remarks>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the web form resides</param>
        /// <param name="formId">Unique identifier for a web form entity that is consistent for it&#39;s lifetime</param>
        /// <param name="createInstanceBody">Request body containing properties that will be used to create instance.</param>
        /// <returns>Task of ApiResponse (WebFormInstance)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebFormInstance>> CreateInstanceAsyncWithHttpInfo(string accountId, string formId, CreateInstanceRequestBody createInstanceBody);
        /// <summary>
        /// Get form instance
        /// </summary>
        /// <remarks>
        /// Retrieves instance information filter by instance id
        /// </remarks>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the web form resides</param>
        /// <param name="formId">Unique identifier for a web form entity that is consistent for it&#39;s lifetime</param>
        /// <param name="instanceId">Unique identifier for a Web Form Instance that is consistent until its expiration</param>
        /// <returns>Task of WebFormInstance</returns>
        System.Threading.Tasks.Task<WebFormInstance> GetInstanceAsync(string accountId, string formId, string instanceId);

        /// <summary>
        /// Get form instance
        /// </summary>
        /// <remarks>
        /// Retrieves instance information filter by instance id
        /// </remarks>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the web form resides</param>
        /// <param name="formId">Unique identifier for a web form entity that is consistent for it&#39;s lifetime</param>
        /// <param name="instanceId">Unique identifier for a Web Form Instance that is consistent until its expiration</param>
        /// <returns>Task of ApiResponse (WebFormInstance)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebFormInstance>> GetInstanceAsyncWithHttpInfo(string accountId, string formId, string instanceId);
        /// <summary>
        /// List instances
        /// </summary>
        /// <remarks>
        /// List all the instances of a web form in an account. When filtered by clientUserId, it will return instances having same clientUserId
        /// </remarks>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the web form resides</param>
        /// <param name="formId">Unique identifier for a web form that is consistent for it&#39;s lifetime</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of WebFormInstanceList</returns>
        System.Threading.Tasks.Task<WebFormInstanceList> ListInstancesAsync(string accountId, string formId, FormInstanceManagementApi.ListInstancesOptions options = null);

        /// <summary>
        /// List instances
        /// </summary>
        /// <remarks>
        /// List all the instances of a web form in an account. When filtered by clientUserId, it will return instances having same clientUserId
        /// </remarks>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the web form resides</param>
        /// <param name="formId">Unique identifier for a web form that is consistent for it&#39;s lifetime</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (WebFormInstanceList)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebFormInstanceList>> ListInstancesAsyncWithHttpInfo(string accountId, string formId, FormInstanceManagementApi.ListInstancesOptions options = null);
        /// <summary>
        /// Refreshes the instance token
        /// </summary>
        /// <remarks>
        /// Generates new instance token for the existing Web Form Instance.
        /// </remarks>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the web form resides</param>
        /// <param name="formId">Unique identifier for a web form entity that is consistent for it&#39;s lifetime</param>
        /// <param name="instanceId">Unique identifier for a Web Form Instance that is consistent until its expiration</param>
        /// <returns>Task of WebFormInstance</returns>
        System.Threading.Tasks.Task<WebFormInstance> RefreshTokenAsync(string accountId, string formId, string instanceId);

        /// <summary>
        /// Refreshes the instance token
        /// </summary>
        /// <remarks>
        /// Generates new instance token for the existing Web Form Instance.
        /// </remarks>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the web form resides</param>
        /// <param name="formId">Unique identifier for a web form entity that is consistent for it&#39;s lifetime</param>
        /// <param name="instanceId">Unique identifier for a Web Form Instance that is consistent until its expiration</param>
        /// <returns>Task of ApiResponse (WebFormInstance)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebFormInstance>> RefreshTokenAsyncWithHttpInfo(string accountId, string formId, string instanceId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FormInstanceManagementApi : IFormInstanceManagementApi
    {
        private DocuSign.WebForms.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FormInstanceManagementApi"/> class
        /// using AplClient object
        /// </summary>
        /// <param name="aplClient">An instance of AplClient</param>
        /// <returns></returns>
        public FormInstanceManagementApi(DocuSignClient aplClient)
        {
            this.ApiClient = aplClient;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.GetBasePath();
        }

        /// <summary>
        /// Gets or sets the ApiClient object
        /// </summary>
        /// <value>An instance of the ApiClient</value>
        public DocuSignClient ApiClient { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DocuSign.WebForms.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }


        /// <summary>
        /// Creates an instance of the web form Creates an instance of the web form.
        /// </summary>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the web form resides</param>
        /// <param name="formId">Unique identifier for a web form entity that is consistent for it&#39;s lifetime</param>
        /// <param name="createInstanceBody">Request body containing properties that will be used to create instance.</param>
        /// <returns>WebFormInstance</returns>
        public WebFormInstance CreateInstance(string accountId, string formId, CreateInstanceRequestBody createInstanceBody)
        {
             ApiResponse<WebFormInstance> localVarResponse = CreateInstanceWithHttpInfo(accountId, formId, createInstanceBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an instance of the web form Creates an instance of the web form.
        /// </summary>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the web form resides</param>
        /// <param name="formId">Unique identifier for a web form entity that is consistent for it&#39;s lifetime</param>
        /// <param name="createInstanceBody">Request body containing properties that will be used to create instance.</param>
        /// <returns>ApiResponse of WebFormInstance</returns>
        public ApiResponse<WebFormInstance> CreateInstanceWithHttpInfo(string accountId, string formId, CreateInstanceRequestBody createInstanceBody)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FormInstanceManagementApi->CreateInstance");
            // verify the required parameter 'formId' is set
            if (formId == null)
                throw new ApiException(400, "Missing required parameter 'formId' when calling FormInstanceManagementApi->CreateInstance");
            // verify the required parameter 'createInstanceBody' is set
            if (createInstanceBody == null)
                throw new ApiException(400, "Missing required parameter 'createInstanceBody' when calling FormInstanceManagementApi->CreateInstance");

            var localVarPath = "/accounts/{account_id}/forms/{form_id}/instances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account_id", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (formId != null) localVarPathParams.Add("form_id", this.ApiClient.ParameterToString(formId)); // path parameter
            if (createInstanceBody != null && createInstanceBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(createInstanceBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createInstanceBody; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebFormInstance>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (WebFormInstance)this.ApiClient.Deserialize(localVarResponse, typeof(WebFormInstance)));
        }

        /// <summary>
        /// Creates an instance of the web form Creates an instance of the web form.
        /// </summary>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the web form resides</param>
        /// <param name="formId">Unique identifier for a web form entity that is consistent for it&#39;s lifetime</param>
        /// <param name="createInstanceBody">Request body containing properties that will be used to create instance.</param>
        /// <returns>Task of WebFormInstance</returns>
        public async System.Threading.Tasks.Task<WebFormInstance> CreateInstanceAsync(string accountId, string formId, CreateInstanceRequestBody createInstanceBody)
        {
             ApiResponse<WebFormInstance> localVarResponse = await CreateInstanceAsyncWithHttpInfo(accountId, formId, createInstanceBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an instance of the web form Creates an instance of the web form.
        /// </summary>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the web form resides</param>
        /// <param name="formId">Unique identifier for a web form entity that is consistent for it&#39;s lifetime</param>
        /// <param name="createInstanceBody">Request body containing properties that will be used to create instance.</param>
        /// <returns>Task of ApiResponse (WebFormInstance)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebFormInstance>> CreateInstanceAsyncWithHttpInfo(string accountId, string formId, CreateInstanceRequestBody createInstanceBody)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FormInstanceManagementApi->CreateInstance");
            // verify the required parameter 'formId' is set
            if (formId == null)
                throw new ApiException(400, "Missing required parameter 'formId' when calling FormInstanceManagementApi->CreateInstance");
            // verify the required parameter 'createInstanceBody' is set
            if (createInstanceBody == null)
                throw new ApiException(400, "Missing required parameter 'createInstanceBody' when calling FormInstanceManagementApi->CreateInstance");

            var localVarPath = "/accounts/{account_id}/forms/{form_id}/instances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account_id", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (formId != null) localVarPathParams.Add("form_id", this.ApiClient.ParameterToString(formId)); // path parameter
            if (createInstanceBody != null && createInstanceBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(createInstanceBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createInstanceBody; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebFormInstance>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (WebFormInstance)this.ApiClient.Deserialize(localVarResponse, typeof(WebFormInstance)));
        }


        /// <summary>
        /// Get form instance Retrieves instance information filter by instance id
        /// </summary>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the web form resides</param>
        /// <param name="formId">Unique identifier for a web form entity that is consistent for it&#39;s lifetime</param>
        /// <param name="instanceId">Unique identifier for a Web Form Instance that is consistent until its expiration</param>
        /// <returns>WebFormInstance</returns>
        public WebFormInstance GetInstance(string accountId, string formId, string instanceId)
        {
             ApiResponse<WebFormInstance> localVarResponse = GetInstanceWithHttpInfo(accountId, formId, instanceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get form instance Retrieves instance information filter by instance id
        /// </summary>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the web form resides</param>
        /// <param name="formId">Unique identifier for a web form entity that is consistent for it&#39;s lifetime</param>
        /// <param name="instanceId">Unique identifier for a Web Form Instance that is consistent until its expiration</param>
        /// <returns>ApiResponse of WebFormInstance</returns>
        public ApiResponse<WebFormInstance> GetInstanceWithHttpInfo(string accountId, string formId, string instanceId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FormInstanceManagementApi->GetInstance");
            // verify the required parameter 'formId' is set
            if (formId == null)
                throw new ApiException(400, "Missing required parameter 'formId' when calling FormInstanceManagementApi->GetInstance");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling FormInstanceManagementApi->GetInstance");

            var localVarPath = "/accounts/{account_id}/forms/{form_id}/instances/{instance_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account_id", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (formId != null) localVarPathParams.Add("form_id", this.ApiClient.ParameterToString(formId)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instance_id", this.ApiClient.ParameterToString(instanceId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebFormInstance>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (WebFormInstance)this.ApiClient.Deserialize(localVarResponse, typeof(WebFormInstance)));
        }

        /// <summary>
        /// Get form instance Retrieves instance information filter by instance id
        /// </summary>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the web form resides</param>
        /// <param name="formId">Unique identifier for a web form entity that is consistent for it&#39;s lifetime</param>
        /// <param name="instanceId">Unique identifier for a Web Form Instance that is consistent until its expiration</param>
        /// <returns>Task of WebFormInstance</returns>
        public async System.Threading.Tasks.Task<WebFormInstance> GetInstanceAsync(string accountId, string formId, string instanceId)
        {
             ApiResponse<WebFormInstance> localVarResponse = await GetInstanceAsyncWithHttpInfo(accountId, formId, instanceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get form instance Retrieves instance information filter by instance id
        /// </summary>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the web form resides</param>
        /// <param name="formId">Unique identifier for a web form entity that is consistent for it&#39;s lifetime</param>
        /// <param name="instanceId">Unique identifier for a Web Form Instance that is consistent until its expiration</param>
        /// <returns>Task of ApiResponse (WebFormInstance)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebFormInstance>> GetInstanceAsyncWithHttpInfo(string accountId, string formId, string instanceId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FormInstanceManagementApi->GetInstance");
            // verify the required parameter 'formId' is set
            if (formId == null)
                throw new ApiException(400, "Missing required parameter 'formId' when calling FormInstanceManagementApi->GetInstance");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling FormInstanceManagementApi->GetInstance");

            var localVarPath = "/accounts/{account_id}/forms/{form_id}/instances/{instance_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account_id", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (formId != null) localVarPathParams.Add("form_id", this.ApiClient.ParameterToString(formId)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instance_id", this.ApiClient.ParameterToString(instanceId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebFormInstance>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (WebFormInstance)this.ApiClient.Deserialize(localVarResponse, typeof(WebFormInstance)));
        }

        /// <summary>
        /// List instances List all the instances of a web form in an account. When filtered by clientUserId, it will return instances having same clientUserId
        /// </summary>
        public class ListInstancesOptions
        {
            /// A unique identifier for a user that should originate from client&#39;s system. This value can be anything your backend system would use to track individual form instances. Examples include employee IDs, email addresses, surrogate key values, etc. 
            public string clientUserId {get; set;}
        }

        /// <summary>
        /// List instances List all the instances of a web form in an account. When filtered by clientUserId, it will return instances having same clientUserId
        /// </summary>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the web form resides</param>
        /// <param name="formId">Unique identifier for a web form that is consistent for it&#39;s lifetime</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>WebFormInstanceList</returns>
        public WebFormInstanceList ListInstances(string accountId, string formId, FormInstanceManagementApi.ListInstancesOptions options = null)
        {
             ApiResponse<WebFormInstanceList> localVarResponse = ListInstancesWithHttpInfo(accountId, formId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List instances List all the instances of a web form in an account. When filtered by clientUserId, it will return instances having same clientUserId
        /// </summary>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the web form resides</param>
        /// <param name="formId">Unique identifier for a web form that is consistent for it&#39;s lifetime</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of WebFormInstanceList</returns>
        public ApiResponse<WebFormInstanceList> ListInstancesWithHttpInfo(string accountId, string formId, FormInstanceManagementApi.ListInstancesOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FormInstanceManagementApi->ListInstances");
            // verify the required parameter 'formId' is set
            if (formId == null)
                throw new ApiException(400, "Missing required parameter 'formId' when calling FormInstanceManagementApi->ListInstances");

            var localVarPath = "/accounts/{account_id}/forms/{form_id}/instances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account_id", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (formId != null) localVarPathParams.Add("form_id", this.ApiClient.ParameterToString(formId)); // path parameter
            if (options != null)
            {
                if (options.clientUserId != null) localVarQueryParams.Add("client_user_id", this.ApiClient.ParameterToString(options.clientUserId)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListInstances", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebFormInstanceList>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (WebFormInstanceList)this.ApiClient.Deserialize(localVarResponse, typeof(WebFormInstanceList)));
        }

        /// <summary>
        /// List instances List all the instances of a web form in an account. When filtered by clientUserId, it will return instances having same clientUserId
        /// </summary>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the web form resides</param>
        /// <param name="formId">Unique identifier for a web form that is consistent for it&#39;s lifetime</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of WebFormInstanceList</returns>
        public async System.Threading.Tasks.Task<WebFormInstanceList> ListInstancesAsync(string accountId, string formId, FormInstanceManagementApi.ListInstancesOptions options = null)
        {
             ApiResponse<WebFormInstanceList> localVarResponse = await ListInstancesAsyncWithHttpInfo(accountId, formId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List instances List all the instances of a web form in an account. When filtered by clientUserId, it will return instances having same clientUserId
        /// </summary>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the web form resides</param>
        /// <param name="formId">Unique identifier for a web form that is consistent for it&#39;s lifetime</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (WebFormInstanceList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebFormInstanceList>> ListInstancesAsyncWithHttpInfo(string accountId, string formId, FormInstanceManagementApi.ListInstancesOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FormInstanceManagementApi->ListInstances");
            // verify the required parameter 'formId' is set
            if (formId == null)
                throw new ApiException(400, "Missing required parameter 'formId' when calling FormInstanceManagementApi->ListInstances");

            var localVarPath = "/accounts/{account_id}/forms/{form_id}/instances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account_id", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (formId != null) localVarPathParams.Add("form_id", this.ApiClient.ParameterToString(formId)); // path parameter
            if (options != null)
            {
                if (options.clientUserId != null) localVarQueryParams.Add("client_user_id", this.ApiClient.ParameterToString(options.clientUserId)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListInstances", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebFormInstanceList>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (WebFormInstanceList)this.ApiClient.Deserialize(localVarResponse, typeof(WebFormInstanceList)));
        }


        /// <summary>
        /// Refreshes the instance token Generates new instance token for the existing Web Form Instance.
        /// </summary>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the web form resides</param>
        /// <param name="formId">Unique identifier for a web form entity that is consistent for it&#39;s lifetime</param>
        /// <param name="instanceId">Unique identifier for a Web Form Instance that is consistent until its expiration</param>
        /// <returns>WebFormInstance</returns>
        public WebFormInstance RefreshToken(string accountId, string formId, string instanceId)
        {
             ApiResponse<WebFormInstance> localVarResponse = RefreshTokenWithHttpInfo(accountId, formId, instanceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Refreshes the instance token Generates new instance token for the existing Web Form Instance.
        /// </summary>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the web form resides</param>
        /// <param name="formId">Unique identifier for a web form entity that is consistent for it&#39;s lifetime</param>
        /// <param name="instanceId">Unique identifier for a Web Form Instance that is consistent until its expiration</param>
        /// <returns>ApiResponse of WebFormInstance</returns>
        public ApiResponse<WebFormInstance> RefreshTokenWithHttpInfo(string accountId, string formId, string instanceId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FormInstanceManagementApi->RefreshToken");
            // verify the required parameter 'formId' is set
            if (formId == null)
                throw new ApiException(400, "Missing required parameter 'formId' when calling FormInstanceManagementApi->RefreshToken");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling FormInstanceManagementApi->RefreshToken");

            var localVarPath = "/accounts/{account_id}/forms/{form_id}/instances/{instance_id}/refresh";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account_id", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (formId != null) localVarPathParams.Add("form_id", this.ApiClient.ParameterToString(formId)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instance_id", this.ApiClient.ParameterToString(instanceId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RefreshToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebFormInstance>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (WebFormInstance)this.ApiClient.Deserialize(localVarResponse, typeof(WebFormInstance)));
        }

        /// <summary>
        /// Refreshes the instance token Generates new instance token for the existing Web Form Instance.
        /// </summary>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the web form resides</param>
        /// <param name="formId">Unique identifier for a web form entity that is consistent for it&#39;s lifetime</param>
        /// <param name="instanceId">Unique identifier for a Web Form Instance that is consistent until its expiration</param>
        /// <returns>Task of WebFormInstance</returns>
        public async System.Threading.Tasks.Task<WebFormInstance> RefreshTokenAsync(string accountId, string formId, string instanceId)
        {
             ApiResponse<WebFormInstance> localVarResponse = await RefreshTokenAsyncWithHttpInfo(accountId, formId, instanceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Refreshes the instance token Generates new instance token for the existing Web Form Instance.
        /// </summary>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the web form resides</param>
        /// <param name="formId">Unique identifier for a web form entity that is consistent for it&#39;s lifetime</param>
        /// <param name="instanceId">Unique identifier for a Web Form Instance that is consistent until its expiration</param>
        /// <returns>Task of ApiResponse (WebFormInstance)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebFormInstance>> RefreshTokenAsyncWithHttpInfo(string accountId, string formId, string instanceId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FormInstanceManagementApi->RefreshToken");
            // verify the required parameter 'formId' is set
            if (formId == null)
                throw new ApiException(400, "Missing required parameter 'formId' when calling FormInstanceManagementApi->RefreshToken");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling FormInstanceManagementApi->RefreshToken");

            var localVarPath = "/accounts/{account_id}/forms/{form_id}/instances/{instance_id}/refresh";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account_id", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (formId != null) localVarPathParams.Add("form_id", this.ApiClient.ParameterToString(formId)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instance_id", this.ApiClient.ParameterToString(instanceId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RefreshToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebFormInstance>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (WebFormInstance)this.ApiClient.Deserialize(localVarResponse, typeof(WebFormInstance)));
        }

    }
}