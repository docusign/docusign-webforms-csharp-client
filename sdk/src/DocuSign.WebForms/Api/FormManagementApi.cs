/* 
 * Web Forms API version 1.1
 *
 * The Web Forms API facilitates generating semantic HTML forms around everyday contracts. 
 *
 * OpenAPI spec version: 1.1.0
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using DocuSign.WebForms.Client;
using DocuSign.WebForms.Model;

namespace DocuSign.WebForms.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFormManagementApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Form
        /// </summary>
        /// <remarks>
        /// Retrieves form information filter by form id and state. The &#x60;state&#x60; parameter is optional and can accept value from &#x60;draft, active&#x60;.
        /// </remarks>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the web form resides</param>
        /// <param name="formId">Unique identifier for a web form that is consistent for it&#39;s lifetime</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        WebForm GetForm(string accountId, string formId, FormManagementApi.GetFormOptions options = null);

        /// <summary>
        /// Get Form
        /// </summary>
        /// <remarks>
        /// Retrieves form information filter by form id and state. The &#x60;state&#x60; parameter is optional and can accept value from &#x60;draft, active&#x60;.
        /// </remarks>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the web form resides</param>
        /// <param name="formId">Unique identifier for a web form that is consistent for it&#39;s lifetime</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<WebForm> GetFormWithHttpInfo(string accountId, string formId, FormManagementApi.GetFormOptions options = null);
        /// <summary>
        /// List Forms
        /// </summary>
        /// <remarks>
        /// List all the forms for the active user that can be in an active or draft state
        /// </remarks>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the webform resides</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        WebFormSummaryList ListForms(string accountId, FormManagementApi.ListFormsOptions options = null);

        /// <summary>
        /// List Forms
        /// </summary>
        /// <remarks>
        /// List all the forms for the active user that can be in an active or draft state
        /// </remarks>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the webform resides</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<WebFormSummaryList> ListFormsWithHttpInfo(string accountId, FormManagementApi.ListFormsOptions options = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Form
        /// </summary>
        /// <remarks>
        /// Retrieves form information filter by form id and state. The &#x60;state&#x60; parameter is optional and can accept value from &#x60;draft, active&#x60;.
        /// </remarks>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the web form resides</param>
        /// <param name="formId">Unique identifier for a web form that is consistent for it&#39;s lifetime</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of WebForm</returns>
        System.Threading.Tasks.Task<WebForm> GetFormAsync(string accountId, string formId, FormManagementApi.GetFormOptions options = null);

        /// <summary>
        /// Get Form
        /// </summary>
        /// <remarks>
        /// Retrieves form information filter by form id and state. The &#x60;state&#x60; parameter is optional and can accept value from &#x60;draft, active&#x60;.
        /// </remarks>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the web form resides</param>
        /// <param name="formId">Unique identifier for a web form that is consistent for it&#39;s lifetime</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (WebForm)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebForm>> GetFormAsyncWithHttpInfo(string accountId, string formId, FormManagementApi.GetFormOptions options = null);
        /// <summary>
        /// List Forms
        /// </summary>
        /// <remarks>
        /// List all the forms for the active user that can be in an active or draft state
        /// </remarks>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the webform resides</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of WebFormSummaryList</returns>
        System.Threading.Tasks.Task<WebFormSummaryList> ListFormsAsync(string accountId, FormManagementApi.ListFormsOptions options = null);

        /// <summary>
        /// List Forms
        /// </summary>
        /// <remarks>
        /// List all the forms for the active user that can be in an active or draft state
        /// </remarks>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the webform resides</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (WebFormSummaryList)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebFormSummaryList>> ListFormsAsyncWithHttpInfo(string accountId, FormManagementApi.ListFormsOptions options = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FormManagementApi : IFormManagementApi
    {
        private DocuSign.WebForms.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FormManagementApi"/> class
        /// using AplClient object
        /// </summary>
        /// <param name="aplClient">An instance of AplClient</param>
        /// <returns></returns>
        public FormManagementApi(DocuSignClient aplClient)
        {
            this.ApiClient = aplClient;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.GetBasePath();
        }

        /// <summary>
        /// Gets or sets the ApiClient object
        /// </summary>
        /// <value>An instance of the ApiClient</value>
        public DocuSignClient ApiClient { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DocuSign.WebForms.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Form Retrieves form information filter by form id and state. The &#x60;state&#x60; parameter is optional and can accept value from &#x60;draft, active&#x60;.
        /// </summary>
        public class GetFormOptions
        {
            /// The state of the web form configuration 
            public string state {get; set;}
        }

        /// <summary>
        /// Get Form Retrieves form information filter by form id and state. The &#x60;state&#x60; parameter is optional and can accept value from &#x60;draft, active&#x60;.
        /// </summary>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the web form resides</param>
        /// <param name="formId">Unique identifier for a web form that is consistent for it&#39;s lifetime</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>WebForm</returns>
        public WebForm GetForm(string accountId, string formId, FormManagementApi.GetFormOptions options = null)
        {
             ApiResponse<WebForm> localVarResponse = GetFormWithHttpInfo(accountId, formId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Form Retrieves form information filter by form id and state. The &#x60;state&#x60; parameter is optional and can accept value from &#x60;draft, active&#x60;.
        /// </summary>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the web form resides</param>
        /// <param name="formId">Unique identifier for a web form that is consistent for it&#39;s lifetime</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of WebForm</returns>
        public ApiResponse<WebForm> GetFormWithHttpInfo(string accountId, string formId, FormManagementApi.GetFormOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FormManagementApi->GetForm");
            // verify the required parameter 'formId' is set
            if (formId == null)
                throw new ApiException(400, "Missing required parameter 'formId' when calling FormManagementApi->GetForm");

            var localVarPath = "/accounts/{accountId}/forms/{formId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (formId != null) localVarPathParams.Add("formId", this.ApiClient.ParameterToString(formId)); // path parameter
            if (options != null)
            {
                if (options.state != null) localVarQueryParams.Add("state", this.ApiClient.ParameterToString(options.state)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetForm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebForm>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (WebForm)this.ApiClient.Deserialize(localVarResponse, typeof(WebForm)));
        }

        /// <summary>
        /// Get Form Retrieves form information filter by form id and state. The &#x60;state&#x60; parameter is optional and can accept value from &#x60;draft, active&#x60;.
        /// </summary>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the web form resides</param>
        /// <param name="formId">Unique identifier for a web form that is consistent for it&#39;s lifetime</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of WebForm</returns>
        public async System.Threading.Tasks.Task<WebForm> GetFormAsync(string accountId, string formId, FormManagementApi.GetFormOptions options = null)
        {
             ApiResponse<WebForm> localVarResponse = await GetFormAsyncWithHttpInfo(accountId, formId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Form Retrieves form information filter by form id and state. The &#x60;state&#x60; parameter is optional and can accept value from &#x60;draft, active&#x60;.
        /// </summary>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the web form resides</param>
        /// <param name="formId">Unique identifier for a web form that is consistent for it&#39;s lifetime</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (WebForm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebForm>> GetFormAsyncWithHttpInfo(string accountId, string formId, FormManagementApi.GetFormOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FormManagementApi->GetForm");
            // verify the required parameter 'formId' is set
            if (formId == null)
                throw new ApiException(400, "Missing required parameter 'formId' when calling FormManagementApi->GetForm");

            var localVarPath = "/accounts/{accountId}/forms/{formId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (formId != null) localVarPathParams.Add("formId", this.ApiClient.ParameterToString(formId)); // path parameter
            if (options != null)
            {
                if (options.state != null) localVarQueryParams.Add("state", this.ApiClient.ParameterToString(options.state)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetForm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebForm>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (WebForm)this.ApiClient.Deserialize(localVarResponse, typeof(WebForm)));
        }

        /// <summary>
        /// List Forms List all the forms for the active user that can be in an active or draft state
        /// </summary>
        public class ListFormsOptions
        {
            /// Filter which forms are returned 
            public string userFilter {get; set;}
            /// Is the form a standalone form 
            public bool? isStandalone {get; set;}
            /// Has the form been published 
            public bool? isPublished {get; set;}
            /// Sort result set in mentioned sort property:order. Default is lastModifiedDateTime:desc. Default sort is descending if not mentioned. 
            public string sortBy {get; set;}
            /// Search through form names 
            public string search {get; set;}
            /// Starting position for desired page of results. 
            public string startPosition {get; set;}
            /// Number of results to return per page. 
            public string count {get; set;}
        }

        /// <summary>
        /// List Forms List all the forms for the active user that can be in an active or draft state
        /// </summary>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the webform resides</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>WebFormSummaryList</returns>
        public WebFormSummaryList ListForms(string accountId, FormManagementApi.ListFormsOptions options = null)
        {
             ApiResponse<WebFormSummaryList> localVarResponse = ListFormsWithHttpInfo(accountId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Forms List all the forms for the active user that can be in an active or draft state
        /// </summary>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the webform resides</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of WebFormSummaryList</returns>
        public ApiResponse<WebFormSummaryList> ListFormsWithHttpInfo(string accountId, FormManagementApi.ListFormsOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FormManagementApi->ListForms");

            var localVarPath = "/accounts/{accountId}/forms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (options != null)
            {
                if (options.userFilter != null) localVarQueryParams.Add("user_filter", this.ApiClient.ParameterToString(options.userFilter)); // query parameter
                if (options.isStandalone != null) localVarQueryParams.Add("is_standalone", this.ApiClient.ParameterToString(options.isStandalone)); // query parameter
                if (options.isPublished != null) localVarQueryParams.Add("is_published", this.ApiClient.ParameterToString(options.isPublished)); // query parameter
                if (options.sortBy != null) localVarQueryParams.Add("sort_by", this.ApiClient.ParameterToString(options.sortBy)); // query parameter
                if (options.search != null) localVarQueryParams.Add("search", this.ApiClient.ParameterToString(options.search)); // query parameter
                if (options.startPosition != null) localVarQueryParams.Add("start_position", this.ApiClient.ParameterToString(options.startPosition)); // query parameter
                if (options.count != null) localVarQueryParams.Add("count", this.ApiClient.ParameterToString(options.count)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListForms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebFormSummaryList>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (WebFormSummaryList)this.ApiClient.Deserialize(localVarResponse, typeof(WebFormSummaryList)));
        }

        /// <summary>
        /// List Forms List all the forms for the active user that can be in an active or draft state
        /// </summary>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the webform resides</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of WebFormSummaryList</returns>
        public async System.Threading.Tasks.Task<WebFormSummaryList> ListFormsAsync(string accountId, FormManagementApi.ListFormsOptions options = null)
        {
             ApiResponse<WebFormSummaryList> localVarResponse = await ListFormsAsyncWithHttpInfo(accountId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Forms List all the forms for the active user that can be in an active or draft state
        /// </summary>
        /// <exception cref="DocuSign.WebForms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account identifier in which the webform resides</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (WebFormSummaryList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebFormSummaryList>> ListFormsAsyncWithHttpInfo(string accountId, FormManagementApi.ListFormsOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FormManagementApi->ListForms");

            var localVarPath = "/accounts/{accountId}/forms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (options != null)
            {
                if (options.userFilter != null) localVarQueryParams.Add("user_filter", this.ApiClient.ParameterToString(options.userFilter)); // query parameter
                if (options.isStandalone != null) localVarQueryParams.Add("is_standalone", this.ApiClient.ParameterToString(options.isStandalone)); // query parameter
                if (options.isPublished != null) localVarQueryParams.Add("is_published", this.ApiClient.ParameterToString(options.isPublished)); // query parameter
                if (options.sortBy != null) localVarQueryParams.Add("sort_by", this.ApiClient.ParameterToString(options.sortBy)); // query parameter
                if (options.search != null) localVarQueryParams.Add("search", this.ApiClient.ParameterToString(options.search)); // query parameter
                if (options.startPosition != null) localVarQueryParams.Add("start_position", this.ApiClient.ParameterToString(options.startPosition)); // query parameter
                if (options.count != null) localVarQueryParams.Add("count", this.ApiClient.ParameterToString(options.count)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListForms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebFormSummaryList>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (WebFormSummaryList)this.ApiClient.Deserialize(localVarResponse, typeof(WebFormSummaryList)));
        }

    }
}