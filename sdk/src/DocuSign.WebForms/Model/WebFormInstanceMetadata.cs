/* 
 * Web Forms API version 1.1
 *
 * The Web Forms API facilitates generating semantic HTML forms around everyday contracts. 
 *
 * OpenAPI spec version: 1.1.0
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.WebForms.Model
{
    /// <summary>
    /// Web Form Instance metadata containing information like created by, created time, etc.
    /// </summary>
    [DataContract]
    public partial class WebFormInstanceMetadata :  IEquatable<WebFormInstanceMetadata>, IValidatableObject
    {
        public WebFormInstanceMetadata()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Gets or Sets InstanceSource
        /// </summary>
        [DataMember(Name="instanceSource", EmitDefaultValue=false)]
        public InstanceSource? InstanceSource { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WebFormInstanceMetadata" /> class.
        /// </summary>
        /// <param name="ExpirationDateTime">ExpirationDateTime (required).</param>
        /// <param name="CreatedDateTime">CreatedDateTime (required).</param>
        /// <param name="CreatedBy">The user that created the Web Form Instance (required).</param>
        /// <param name="LastModifiedDateTime">LastModifiedDateTime.</param>
        /// <param name="LastModifiedBy">The user that last modified the Web Form Instance.</param>
        /// <param name="SubmittedDateTime">SubmittedDateTime.</param>
        /// <param name="InstanceSource">InstanceSource.</param>
        public WebFormInstanceMetadata(DateTime? ExpirationDateTime = default(DateTime?), DateTime? CreatedDateTime = default(DateTime?), WebFormUserInfo CreatedBy = default(WebFormUserInfo), DateTime? LastModifiedDateTime = default(DateTime?), WebFormUserInfo LastModifiedBy = default(WebFormUserInfo), DateTime? SubmittedDateTime = default(DateTime?), InstanceSource? InstanceSource = default(InstanceSource?))
        {
            // to ensure "ExpirationDateTime" is required (not null)
            if (ExpirationDateTime == null)
            {
                throw new InvalidDataException("ExpirationDateTime is a required property for WebFormInstanceMetadata and cannot be null");
            }
            else
            {
                this.ExpirationDateTime = ExpirationDateTime;
            }
            // to ensure "CreatedDateTime" is required (not null)
            if (CreatedDateTime == null)
            {
                throw new InvalidDataException("CreatedDateTime is a required property for WebFormInstanceMetadata and cannot be null");
            }
            else
            {
                this.CreatedDateTime = CreatedDateTime;
            }
            // to ensure "CreatedBy" is required (not null)
            if (CreatedBy == null)
            {
                throw new InvalidDataException("CreatedBy is a required property for WebFormInstanceMetadata and cannot be null");
            }
            else
            {
                this.CreatedBy = CreatedBy;
            }
            this.LastModifiedDateTime = LastModifiedDateTime;
            this.LastModifiedBy = LastModifiedBy;
            this.SubmittedDateTime = SubmittedDateTime;
            this.InstanceSource = InstanceSource;
        }
        
        /// <summary>
        /// Gets or Sets ExpirationDateTime
        /// </summary>
        [DataMember(Name="expirationDateTime", EmitDefaultValue=false)]
        public DateTime? ExpirationDateTime { get; set; }
        /// <summary>
        /// Gets or Sets CreatedDateTime
        /// </summary>
        [DataMember(Name="createdDateTime", EmitDefaultValue=false)]
        public DateTime? CreatedDateTime { get; set; }
        /// <summary>
        /// The user that created the Web Form Instance
        /// </summary>
        /// <value>The user that created the Web Form Instance</value>
        [DataMember(Name="createdBy", EmitDefaultValue=false)]
        public WebFormUserInfo CreatedBy { get; set; }
        /// <summary>
        /// Gets or Sets LastModifiedDateTime
        /// </summary>
        [DataMember(Name="lastModifiedDateTime", EmitDefaultValue=false)]
        public DateTime? LastModifiedDateTime { get; set; }
        /// <summary>
        /// The user that last modified the Web Form Instance
        /// </summary>
        /// <value>The user that last modified the Web Form Instance</value>
        [DataMember(Name="lastModifiedBy", EmitDefaultValue=false)]
        public WebFormUserInfo LastModifiedBy { get; set; }
        /// <summary>
        /// Gets or Sets SubmittedDateTime
        /// </summary>
        [DataMember(Name="submittedDateTime", EmitDefaultValue=false)]
        public DateTime? SubmittedDateTime { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebFormInstanceMetadata {\n");
            sb.Append("  ExpirationDateTime: ").Append(ExpirationDateTime).Append("\n");
            sb.Append("  CreatedDateTime: ").Append(CreatedDateTime).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  LastModifiedDateTime: ").Append(LastModifiedDateTime).Append("\n");
            sb.Append("  LastModifiedBy: ").Append(LastModifiedBy).Append("\n");
            sb.Append("  SubmittedDateTime: ").Append(SubmittedDateTime).Append("\n");
            sb.Append("  InstanceSource: ").Append(InstanceSource).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as WebFormInstanceMetadata);
        }

        /// <summary>
        /// Returns true if WebFormInstanceMetadata instances are equal
        /// </summary>
        /// <param name="other">Instance of WebFormInstanceMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebFormInstanceMetadata other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ExpirationDateTime == other.ExpirationDateTime ||
                    this.ExpirationDateTime != null &&
                    this.ExpirationDateTime.Equals(other.ExpirationDateTime)
                ) && 
                (
                    this.CreatedDateTime == other.CreatedDateTime ||
                    this.CreatedDateTime != null &&
                    this.CreatedDateTime.Equals(other.CreatedDateTime)
                ) && 
                (
                    this.CreatedBy == other.CreatedBy ||
                    this.CreatedBy != null &&
                    this.CreatedBy.Equals(other.CreatedBy)
                ) && 
                (
                    this.LastModifiedDateTime == other.LastModifiedDateTime ||
                    this.LastModifiedDateTime != null &&
                    this.LastModifiedDateTime.Equals(other.LastModifiedDateTime)
                ) && 
                (
                    this.LastModifiedBy == other.LastModifiedBy ||
                    this.LastModifiedBy != null &&
                    this.LastModifiedBy.Equals(other.LastModifiedBy)
                ) && 
                (
                    this.SubmittedDateTime == other.SubmittedDateTime ||
                    this.SubmittedDateTime != null &&
                    this.SubmittedDateTime.Equals(other.SubmittedDateTime)
                ) && 
                (
                    this.InstanceSource == other.InstanceSource ||
                    this.InstanceSource != null &&
                    this.InstanceSource.Equals(other.InstanceSource)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ExpirationDateTime != null)
                    hash = hash * 59 + this.ExpirationDateTime.GetHashCode();
                if (this.CreatedDateTime != null)
                    hash = hash * 59 + this.CreatedDateTime.GetHashCode();
                if (this.CreatedBy != null)
                    hash = hash * 59 + this.CreatedBy.GetHashCode();
                if (this.LastModifiedDateTime != null)
                    hash = hash * 59 + this.LastModifiedDateTime.GetHashCode();
                if (this.LastModifiedBy != null)
                    hash = hash * 59 + this.LastModifiedBy.GetHashCode();
                if (this.SubmittedDateTime != null)
                    hash = hash * 59 + this.SubmittedDateTime.GetHashCode();
                if (this.InstanceSource != null)
                    hash = hash * 59 + this.InstanceSource.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
