/* 
 * Web Forms API version 1.1
 *
 * The Web Forms API facilitates generating semantic HTML forms around everyday contracts. 
 *
 * OpenAPI spec version: 1.1.0
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.WebForms.Model
{
    /// <summary>
    /// Phone number of the user.
    /// </summary>
    [DataContract]
    public partial class PhoneNumber :  IEquatable<PhoneNumber>, IValidatableObject
    {
        public PhoneNumber()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PhoneNumber" /> class.
        /// </summary>
        /// <param name="CountryCode">country code of the registered phone number..</param>
        /// <param name="NationalNumber">Phone number of the user (without country code)..</param>
        public PhoneNumber(string CountryCode = default(string), string NationalNumber = default(string))
        {
            this.CountryCode = CountryCode;
            this.NationalNumber = NationalNumber;
        }
        
        /// <summary>
        /// country code of the registered phone number.
        /// </summary>
        /// <value>country code of the registered phone number.</value>
        [DataMember(Name="countryCode", EmitDefaultValue=false)]
        public string CountryCode { get; set; }
        /// <summary>
        /// Phone number of the user (without country code).
        /// </summary>
        /// <value>Phone number of the user (without country code).</value>
        [DataMember(Name="nationalNumber", EmitDefaultValue=false)]
        public string NationalNumber { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PhoneNumber {\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  NationalNumber: ").Append(NationalNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PhoneNumber);
        }

        /// <summary>
        /// Returns true if PhoneNumber instances are equal
        /// </summary>
        /// <param name="other">Instance of PhoneNumber to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PhoneNumber other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CountryCode == other.CountryCode ||
                    this.CountryCode != null &&
                    this.CountryCode.Equals(other.CountryCode)
                ) && 
                (
                    this.NationalNumber == other.NationalNumber ||
                    this.NationalNumber != null &&
                    this.NationalNumber.Equals(other.NationalNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CountryCode != null)
                    hash = hash * 59 + this.CountryCode.GetHashCode();
                if (this.NationalNumber != null)
                    hash = hash * 59 + this.NationalNumber.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // CountryCode (string) maxLength
            if(this.CountryCode != null && this.CountryCode.Length > 7)
            {
                yield return new ValidationResult("Invalid value for CountryCode, length must be less than 7.", new [] { "CountryCode" });
            }

            // NationalNumber (string) maxLength
            if(this.NationalNumber != null && this.NationalNumber.Length > 15)
            {
                yield return new ValidationResult("Invalid value for NationalNumber, length must be less than 15.", new [] { "NationalNumber" });
            }

            yield break;
        }
    }
}
