/* 
 * Web Forms API version 1.1
 *
 * The Web Forms API facilitates generating semantic HTML forms around everyday contracts. 
 *
 * OpenAPI spec version: 1.1.0
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.WebForms.Model
{
    /// <summary>
    /// Each component type contains additional properties
    /// </summary>
    [DataContract]
    public partial class WebFormComponent :  IEquatable<WebFormComponent>, IValidatableObject
    {
        public WebFormComponent()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebFormComponent" /> class.
        /// </summary>
        /// <param name="ComponentKey">ComponentKey (required).</param>
        /// <param name="ComponentType">The type of component this object represents (required).</param>
        /// <param name="ComponentName">Name value that is used for mapping components to external sources.</param>
        public WebFormComponent(string ComponentKey = default(string), string ComponentType = default(string), string ComponentName = default(string))
        {
            // to ensure "ComponentKey" is required (not null)
            if (ComponentKey == null)
            {
                throw new InvalidDataException("ComponentKey is a required property for WebFormComponent and cannot be null");
            }
            else
            {
                this.ComponentKey = ComponentKey;
            }
            // to ensure "ComponentType" is required (not null)
            if (ComponentType == null)
            {
                throw new InvalidDataException("ComponentType is a required property for WebFormComponent and cannot be null");
            }
            else
            {
                this.ComponentType = ComponentType;
            }
            this.ComponentName = ComponentName;
        }
        
        /// <summary>
        /// Gets or Sets ComponentKey
        /// </summary>
        [DataMember(Name="componentKey", EmitDefaultValue=false)]
        public string ComponentKey { get; set; }
        /// <summary>
        /// The type of component this object represents
        /// </summary>
        /// <value>The type of component this object represents</value>
        [DataMember(Name="componentType", EmitDefaultValue=false)]
        public string ComponentType { get; set; }
        /// <summary>
        /// Name value that is used for mapping components to external sources
        /// </summary>
        /// <value>Name value that is used for mapping components to external sources</value>
        [DataMember(Name="componentName", EmitDefaultValue=false)]
        public string ComponentName { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebFormComponent {\n");
            sb.Append("  ComponentKey: ").Append(ComponentKey).Append("\n");
            sb.Append("  ComponentType: ").Append(ComponentType).Append("\n");
            sb.Append("  ComponentName: ").Append(ComponentName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as WebFormComponent);
        }

        /// <summary>
        /// Returns true if WebFormComponent instances are equal
        /// </summary>
        /// <param name="other">Instance of WebFormComponent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebFormComponent other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ComponentKey == other.ComponentKey ||
                    this.ComponentKey != null &&
                    this.ComponentKey.Equals(other.ComponentKey)
                ) && 
                (
                    this.ComponentType == other.ComponentType ||
                    this.ComponentType != null &&
                    this.ComponentType.Equals(other.ComponentType)
                ) && 
                (
                    this.ComponentName == other.ComponentName ||
                    this.ComponentName != null &&
                    this.ComponentName.Equals(other.ComponentName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ComponentKey != null)
                    hash = hash * 59 + this.ComponentKey.GetHashCode();
                if (this.ComponentType != null)
                    hash = hash * 59 + this.ComponentType.GetHashCode();
                if (this.ComponentName != null)
                    hash = hash * 59 + this.ComponentName.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // ComponentType (string) maxLength
            if(this.ComponentType != null && this.ComponentType.Length > 100)
            {
                yield return new ValidationResult("Invalid value for ComponentType, length must be less than 100.", new [] { "ComponentType" });
            }

            // ComponentName (string) maxLength
            if(this.ComponentName != null && this.ComponentName.Length > 100)
            {
                yield return new ValidationResult("Invalid value for ComponentName, length must be less than 100.", new [] { "ComponentName" });
            }

            yield break;
        }
    }
}
