/* 
 * Web Forms API version 1.1
 *
 * The Web Forms API facilitates generating semantic HTML forms around everyday contracts. 
 *
 * OpenAPI spec version: 1.1.0
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.WebForms.Model
{
    /// <summary>
    /// An object that summarizes an instance of a form that can be used to display a listing
    /// </summary>
    [DataContract]
    public partial class WebFormSummary :  IEquatable<WebFormSummary>, IValidatableObject
    {
        public WebFormSummary()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Defines FormState
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WebFormState
        {
            
            /// <summary>
            /// Enum Active for value: active
            /// </summary>
            [EnumMember(Value = "active")]
            Active = 1,
            
            /// <summary>
            /// Enum Draft for value: draft
            /// </summary>
            [EnumMember(Value = "draft")]
            Draft = 2
        }

        /// <summary>
        /// Gets or Sets FormState
        /// </summary>
        [DataMember(Name="formState", EmitDefaultValue=false)]
        public WebFormState? FormState { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WebFormSummary" /> class.
        /// </summary>
        /// <param name="Id">Unique identifier for the web form.</param>
        /// <param name="AccountId">Account identifier.</param>
        /// <param name="IsPublished">Has the form been published.</param>
        /// <param name="IsEnabled">Is the form currently enabled and available for data collection.</param>
        /// <param name="HasDraftChanges">Does the form have draft changes that need to be published?.</param>
        /// <param name="FormState">FormState.</param>
        /// <param name="FormProperties">Form properties.</param>
        /// <param name="FormMetadata">Form metadata.</param>
        public WebFormSummary(string Id = default(string), string AccountId = default(string), bool? IsPublished = default(bool?), bool? IsEnabled = default(bool?), bool? HasDraftChanges = default(bool?), WebFormState? FormState = default(WebFormState?), WebFormProperties FormProperties = default(WebFormProperties), WebFormMetadata FormMetadata = default(WebFormMetadata))
        {
            this.Id = Id;
            this.AccountId = AccountId;
            this.IsPublished = IsPublished;
            this.IsEnabled = IsEnabled;
            this.HasDraftChanges = HasDraftChanges;
            this.FormState = FormState;
            this.FormProperties = FormProperties;
            this.FormMetadata = FormMetadata;
        }
        
        /// <summary>
        /// Unique identifier for the web form
        /// </summary>
        /// <value>Unique identifier for the web form</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Account identifier
        /// </summary>
        /// <value>Account identifier</value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public string AccountId { get; set; }
        /// <summary>
        /// Has the form been published
        /// </summary>
        /// <value>Has the form been published</value>
        [DataMember(Name="isPublished", EmitDefaultValue=false)]
        public bool? IsPublished { get; set; }
        /// <summary>
        /// Is the form currently enabled and available for data collection
        /// </summary>
        /// <value>Is the form currently enabled and available for data collection</value>
        [DataMember(Name="isEnabled", EmitDefaultValue=false)]
        public bool? IsEnabled { get; set; }
        /// <summary>
        /// Does the form have draft changes that need to be published?
        /// </summary>
        /// <value>Does the form have draft changes that need to be published?</value>
        [DataMember(Name="hasDraftChanges", EmitDefaultValue=false)]
        public bool? HasDraftChanges { get; set; }
        /// <summary>
        /// Form properties
        /// </summary>
        /// <value>Form properties</value>
        [DataMember(Name="formProperties", EmitDefaultValue=false)]
        public WebFormProperties FormProperties { get; set; }
        /// <summary>
        /// Form metadata
        /// </summary>
        /// <value>Form metadata</value>
        [DataMember(Name="formMetadata", EmitDefaultValue=false)]
        public WebFormMetadata FormMetadata { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebFormSummary {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  IsPublished: ").Append(IsPublished).Append("\n");
            sb.Append("  IsEnabled: ").Append(IsEnabled).Append("\n");
            sb.Append("  HasDraftChanges: ").Append(HasDraftChanges).Append("\n");
            sb.Append("  FormState: ").Append(FormState).Append("\n");
            sb.Append("  FormProperties: ").Append(FormProperties).Append("\n");
            sb.Append("  FormMetadata: ").Append(FormMetadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as WebFormSummary);
        }

        /// <summary>
        /// Returns true if WebFormSummary instances are equal
        /// </summary>
        /// <param name="other">Instance of WebFormSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebFormSummary other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.AccountId == other.AccountId ||
                    this.AccountId != null &&
                    this.AccountId.Equals(other.AccountId)
                ) && 
                (
                    this.IsPublished == other.IsPublished ||
                    this.IsPublished != null &&
                    this.IsPublished.Equals(other.IsPublished)
                ) && 
                (
                    this.IsEnabled == other.IsEnabled ||
                    this.IsEnabled != null &&
                    this.IsEnabled.Equals(other.IsEnabled)
                ) && 
                (
                    this.HasDraftChanges == other.HasDraftChanges ||
                    this.HasDraftChanges != null &&
                    this.HasDraftChanges.Equals(other.HasDraftChanges)
                ) && 
                (
                    this.FormState == other.FormState ||
                    this.FormState != null &&
                    this.FormState.Equals(other.FormState)
                ) && 
                (
                    this.FormProperties == other.FormProperties ||
                    this.FormProperties != null &&
                    this.FormProperties.Equals(other.FormProperties)
                ) && 
                (
                    this.FormMetadata == other.FormMetadata ||
                    this.FormMetadata != null &&
                    this.FormMetadata.Equals(other.FormMetadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.AccountId != null)
                    hash = hash * 59 + this.AccountId.GetHashCode();
                if (this.IsPublished != null)
                    hash = hash * 59 + this.IsPublished.GetHashCode();
                if (this.IsEnabled != null)
                    hash = hash * 59 + this.IsEnabled.GetHashCode();
                if (this.HasDraftChanges != null)
                    hash = hash * 59 + this.HasDraftChanges.GetHashCode();
                if (this.FormState != null)
                    hash = hash * 59 + this.FormState.GetHashCode();
                if (this.FormProperties != null)
                    hash = hash * 59 + this.FormProperties.GetHashCode();
                if (this.FormMetadata != null)
                    hash = hash * 59 + this.FormMetadata.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
