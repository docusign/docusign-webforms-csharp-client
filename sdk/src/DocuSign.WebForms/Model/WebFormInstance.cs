/* 
 * Web Forms API version 1.1
 *
 * The Web Forms API facilitates generating semantic HTML forms around everyday contracts. 
 *
 * OpenAPI spec version: 1.1.0
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.WebForms.Model
{
    /// <summary>
    /// An object that contains the Web Form Instance required to render it  and its metadata such as created by, created time
    /// </summary>
    [DataContract]
    public partial class WebFormInstance :  IEquatable<WebFormInstance>, IValidatableObject
    {
        public WebFormInstance()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public InstanceStatus? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WebFormInstance" /> class.
        /// </summary>
        /// <param name="FormUrl">FormUrl.</param>
        /// <param name="InstanceToken">InstanceToken.</param>
        /// <param name="TokenExpirationDateTime">TokenExpirationDateTime.</param>
        /// <param name="Id">Id (required).</param>
        /// <param name="FormId">Web form from which the instance is created.</param>
        /// <param name="AccountId">AccountId.</param>
        /// <param name="ClientUserId">ClientUserId.</param>
        /// <param name="Tags">List of tags provided by the user with each request. This field is optional..</param>
        /// <param name="Status">Status.</param>
        /// <param name="Envelopes">The associated envelope that is created when the instance is submitted.</param>
        /// <param name="InstanceMetadata">InstanceMetadata.</param>
        /// <param name="FormValues">FormValues.</param>
        /// <param name="Recipients">The associated envelope that is created when the instance is submitted.</param>
        public WebFormInstance(string FormUrl = default(string), string InstanceToken = default(string), DateTime? TokenExpirationDateTime = default(DateTime?), string Id = default(string), string FormId = default(string), string AccountId = default(string), string ClientUserId = default(string), List<string> Tags = default(List<string>), InstanceStatus? Status = default(InstanceStatus?), List<WebFormInstanceEnvelopes> Envelopes = default(List<WebFormInstanceEnvelopes>), WebFormInstanceMetadata InstanceMetadata = default(WebFormInstanceMetadata), WebFormValues FormValues = default(WebFormValues), List<WebFormInstanceRecipients> Recipients = default(List<WebFormInstanceRecipients>))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for WebFormInstance and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            this.FormUrl = FormUrl;
            this.InstanceToken = InstanceToken;
            this.TokenExpirationDateTime = TokenExpirationDateTime;
            this.FormId = FormId;
            this.AccountId = AccountId;
            this.ClientUserId = ClientUserId;
            this.Tags = Tags;
            this.Status = Status;
            this.Envelopes = Envelopes;
            this.InstanceMetadata = InstanceMetadata;
            this.FormValues = FormValues;
            this.Recipients = Recipients;
        }
        
        /// <summary>
        /// Gets or Sets FormUrl
        /// </summary>
        [DataMember(Name="formUrl", EmitDefaultValue=false)]
        public string FormUrl { get; set; }
        /// <summary>
        /// Gets or Sets InstanceToken
        /// </summary>
        [DataMember(Name="instanceToken", EmitDefaultValue=false)]
        public string InstanceToken { get; set; }
        /// <summary>
        /// Gets or Sets TokenExpirationDateTime
        /// </summary>
        [DataMember(Name="tokenExpirationDateTime", EmitDefaultValue=false)]
        public DateTime? TokenExpirationDateTime { get; set; }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Web form from which the instance is created
        /// </summary>
        /// <value>Web form from which the instance is created</value>
        [DataMember(Name="formId", EmitDefaultValue=false)]
        public string FormId { get; set; }
        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public string AccountId { get; set; }
        /// <summary>
        /// Gets or Sets ClientUserId
        /// </summary>
        [DataMember(Name="clientUserId", EmitDefaultValue=false)]
        public string ClientUserId { get; set; }
        /// <summary>
        /// List of tags provided by the user with each request. This field is optional.
        /// </summary>
        /// <value>List of tags provided by the user with each request. This field is optional.</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }
        /// <summary>
        /// The associated envelope that is created when the instance is submitted
        /// </summary>
        /// <value>The associated envelope that is created when the instance is submitted</value>
        [DataMember(Name="envelopes", EmitDefaultValue=false)]
        public List<WebFormInstanceEnvelopes> Envelopes { get; set; }
        /// <summary>
        /// Gets or Sets InstanceMetadata
        /// </summary>
        [DataMember(Name="instanceMetadata", EmitDefaultValue=false)]
        public WebFormInstanceMetadata InstanceMetadata { get; set; }
        /// <summary>
        /// Gets or Sets FormValues
        /// </summary>
        [DataMember(Name="formValues", EmitDefaultValue=false)]
        public WebFormValues FormValues { get; set; }
        /// <summary>
        /// The associated envelope that is created when the instance is submitted
        /// </summary>
        /// <value>The associated envelope that is created when the instance is submitted</value>
        [DataMember(Name="recipients", EmitDefaultValue=false)]
        public List<WebFormInstanceRecipients> Recipients { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebFormInstance {\n");
            sb.Append("  FormUrl: ").Append(FormUrl).Append("\n");
            sb.Append("  InstanceToken: ").Append(InstanceToken).Append("\n");
            sb.Append("  TokenExpirationDateTime: ").Append(TokenExpirationDateTime).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FormId: ").Append(FormId).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  ClientUserId: ").Append(ClientUserId).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Envelopes: ").Append(Envelopes).Append("\n");
            sb.Append("  InstanceMetadata: ").Append(InstanceMetadata).Append("\n");
            sb.Append("  FormValues: ").Append(FormValues).Append("\n");
            sb.Append("  Recipients: ").Append(Recipients).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as WebFormInstance);
        }

        /// <summary>
        /// Returns true if WebFormInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of WebFormInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebFormInstance other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.FormUrl == other.FormUrl ||
                    this.FormUrl != null &&
                    this.FormUrl.Equals(other.FormUrl)
                ) && 
                (
                    this.InstanceToken == other.InstanceToken ||
                    this.InstanceToken != null &&
                    this.InstanceToken.Equals(other.InstanceToken)
                ) && 
                (
                    this.TokenExpirationDateTime == other.TokenExpirationDateTime ||
                    this.TokenExpirationDateTime != null &&
                    this.TokenExpirationDateTime.Equals(other.TokenExpirationDateTime)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.FormId == other.FormId ||
                    this.FormId != null &&
                    this.FormId.Equals(other.FormId)
                ) && 
                (
                    this.AccountId == other.AccountId ||
                    this.AccountId != null &&
                    this.AccountId.Equals(other.AccountId)
                ) && 
                (
                    this.ClientUserId == other.ClientUserId ||
                    this.ClientUserId != null &&
                    this.ClientUserId.Equals(other.ClientUserId)
                ) && 
                (
                    this.Tags == other.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(other.Tags)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Envelopes == other.Envelopes ||
                    this.Envelopes != null &&
                    this.Envelopes.SequenceEqual(other.Envelopes)
                ) && 
                (
                    this.InstanceMetadata == other.InstanceMetadata ||
                    this.InstanceMetadata != null &&
                    this.InstanceMetadata.Equals(other.InstanceMetadata)
                ) && 
                (
                    this.FormValues == other.FormValues ||
                    this.FormValues != null &&
                    this.FormValues.Equals(other.FormValues)
                ) && 
                (
                    this.Recipients == other.Recipients ||
                    this.Recipients != null &&
                    this.Recipients.SequenceEqual(other.Recipients)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.FormUrl != null)
                    hash = hash * 59 + this.FormUrl.GetHashCode();
                if (this.InstanceToken != null)
                    hash = hash * 59 + this.InstanceToken.GetHashCode();
                if (this.TokenExpirationDateTime != null)
                    hash = hash * 59 + this.TokenExpirationDateTime.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.FormId != null)
                    hash = hash * 59 + this.FormId.GetHashCode();
                if (this.AccountId != null)
                    hash = hash * 59 + this.AccountId.GetHashCode();
                if (this.ClientUserId != null)
                    hash = hash * 59 + this.ClientUserId.GetHashCode();
                if (this.Tags != null)
                    hash = hash * 59 + this.Tags.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.Envelopes != null)
                    hash = hash * 59 + this.Envelopes.GetHashCode();
                if (this.InstanceMetadata != null)
                    hash = hash * 59 + this.InstanceMetadata.GetHashCode();
                if (this.FormValues != null)
                    hash = hash * 59 + this.FormValues.GetHashCode();
                if (this.Recipients != null)
                    hash = hash * 59 + this.Recipients.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
