/* 
 * Web Forms API version 1.1
 *
 * The Web Forms API facilitates generating semantic HTML forms around everyday contracts. 
 *
 * OpenAPI spec version: 1.1.0
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.WebForms.Model
{
    /// <summary>
    /// An object that fully describes an instance of a form
    /// </summary>
    [DataContract]
    public partial class WebForm : WebFormSummary,  IEquatable<WebForm>, IValidatableObject
    {
        public WebForm()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebForm" /> class.
        /// </summary>
        /// <param name="VersionId">Identifier for the current version of the form that is published.</param>
        /// <param name="FormContent">Content of the form that is used during configuration and data collection.</param>
        public WebForm(int? VersionId = default(int?), WebFormContent FormContent = default(WebFormContent), string Id = default(string), string AccountId = default(string), bool? IsPublished = default(bool?), bool? IsEnabled = default(bool?), bool? HasDraftChanges = default(bool?), WebFormState? FormState = default(WebFormState?), WebFormProperties FormProperties = default(WebFormProperties), WebFormMetadata FormMetadata = default(WebFormMetadata))
        {
            this.VersionId = VersionId;
            this.FormContent = FormContent;
        }
        
        /// <summary>
        /// Identifier for the current version of the form that is published
        /// </summary>
        /// <value>Identifier for the current version of the form that is published</value>
        [DataMember(Name="versionId", EmitDefaultValue=false)]
        public int? VersionId { get; set; }
        /// <summary>
        /// Content of the form that is used during configuration and data collection
        /// </summary>
        /// <value>Content of the form that is used during configuration and data collection</value>
        [DataMember(Name="formContent", EmitDefaultValue=false)]
        public WebFormContent FormContent { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebForm {\n");
            sb.Append("  VersionId: ").Append(VersionId).Append("\n");
            sb.Append("  FormContent: ").Append(FormContent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as WebForm);
        }

        /// <summary>
        /// Returns true if WebForm instances are equal
        /// </summary>
        /// <param name="other">Instance of WebForm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebForm other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.VersionId == other.VersionId ||
                    this.VersionId != null &&
                    this.VersionId.Equals(other.VersionId)
                ) && 
                (
                    this.FormContent == other.FormContent ||
                    this.FormContent != null &&
                    this.FormContent.Equals(other.FormContent)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.VersionId != null)
                    hash = hash * 59 + this.VersionId.GetHashCode();
                if (this.FormContent != null)
                    hash = hash * 59 + this.FormContent.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
