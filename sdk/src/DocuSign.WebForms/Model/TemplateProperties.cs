/* 
 * Web Forms API version 1.1
 *
 * The Web Forms API facilitates generating semantic HTML forms around everyday contracts. 
 *
 * OpenAPI spec version: 1.1.0
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.WebForms.Model
{
    /// <summary>
    /// Information about a DocuSign template that will be used to seed a web form.
    /// </summary>
    [DataContract]
    public partial class TemplateProperties :  IEquatable<TemplateProperties>, IValidatableObject
    {
        public TemplateProperties()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateProperties" /> class.
        /// </summary>
        /// <param name="OriginalTemplateId">Template identifier for original Template that is used by the DocuSign Template API..</param>
        /// <param name="ClonedTemplateId">Template identifier for cloned Template that is used by the DocuSign Template API..</param>
        /// <param name="ImportedDateTime">Track the time of assignment of Template information to the Form..</param>
        /// <param name="RecipientIds">Track mapped recipients on Template..</param>
        public TemplateProperties(string OriginalTemplateId = default(string), string ClonedTemplateId = default(string), DateTime? ImportedDateTime = default(DateTime?), List<string> RecipientIds = default(List<string>))
        {
            this.OriginalTemplateId = OriginalTemplateId;
            this.ClonedTemplateId = ClonedTemplateId;
            this.ImportedDateTime = ImportedDateTime;
            this.RecipientIds = RecipientIds;
        }
        
        /// <summary>
        /// Template identifier for original Template that is used by the DocuSign Template API.
        /// </summary>
        /// <value>Template identifier for original Template that is used by the DocuSign Template API.</value>
        [DataMember(Name="originalTemplateId", EmitDefaultValue=false)]
        public string OriginalTemplateId { get; set; }
        /// <summary>
        /// Template identifier for cloned Template that is used by the DocuSign Template API.
        /// </summary>
        /// <value>Template identifier for cloned Template that is used by the DocuSign Template API.</value>
        [DataMember(Name="clonedTemplateId", EmitDefaultValue=false)]
        public string ClonedTemplateId { get; set; }
        /// <summary>
        /// Track the time of assignment of Template information to the Form.
        /// </summary>
        /// <value>Track the time of assignment of Template information to the Form.</value>
        [DataMember(Name="importedDateTime", EmitDefaultValue=false)]
        public DateTime? ImportedDateTime { get; set; }
        /// <summary>
        /// Track mapped recipients on Template.
        /// </summary>
        /// <value>Track mapped recipients on Template.</value>
        [DataMember(Name="recipientIds", EmitDefaultValue=false)]
        public List<string> RecipientIds { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TemplateProperties {\n");
            sb.Append("  OriginalTemplateId: ").Append(OriginalTemplateId).Append("\n");
            sb.Append("  ClonedTemplateId: ").Append(ClonedTemplateId).Append("\n");
            sb.Append("  ImportedDateTime: ").Append(ImportedDateTime).Append("\n");
            sb.Append("  RecipientIds: ").Append(RecipientIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TemplateProperties);
        }

        /// <summary>
        /// Returns true if TemplateProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of TemplateProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TemplateProperties other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.OriginalTemplateId == other.OriginalTemplateId ||
                    this.OriginalTemplateId != null &&
                    this.OriginalTemplateId.Equals(other.OriginalTemplateId)
                ) && 
                (
                    this.ClonedTemplateId == other.ClonedTemplateId ||
                    this.ClonedTemplateId != null &&
                    this.ClonedTemplateId.Equals(other.ClonedTemplateId)
                ) && 
                (
                    this.ImportedDateTime == other.ImportedDateTime ||
                    this.ImportedDateTime != null &&
                    this.ImportedDateTime.Equals(other.ImportedDateTime)
                ) && 
                (
                    this.RecipientIds == other.RecipientIds ||
                    this.RecipientIds != null &&
                    this.RecipientIds.SequenceEqual(other.RecipientIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.OriginalTemplateId != null)
                    hash = hash * 59 + this.OriginalTemplateId.GetHashCode();
                if (this.ClonedTemplateId != null)
                    hash = hash * 59 + this.ClonedTemplateId.GetHashCode();
                if (this.ImportedDateTime != null)
                    hash = hash * 59 + this.ImportedDateTime.GetHashCode();
                if (this.RecipientIds != null)
                    hash = hash * 59 + this.RecipientIds.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
