/* 
 * Web Forms API version 1.1
 *
 * The Web Forms API facilitates generating semantic HTML forms around everyday contracts. 
 *
 * OpenAPI spec version: 1.1.0
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.WebForms.Model
{
    /// <summary>
    /// Container for the components map used during configuration and data collection
    /// </summary>
    [DataContract]
    public partial class WebFormContent :  IEquatable<WebFormContent>, IValidatableObject
    {
        public WebFormContent()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebFormContent" /> class.
        /// </summary>
        /// <param name="Components">Key/value dictionary of components that represent the form.</param>
        /// <param name="IsStandalone">IsStandalone.</param>
        /// <param name="BrandId">BrandId.</param>
        /// <param name="Templates">Optional template information that will be used to seed the form..</param>
        public WebFormContent(Dictionary<string, Dictionary<string, Object>> Components = default(Dictionary<string, Dictionary<string, Object>>), bool? IsStandalone = default(bool?), string BrandId = default(string), List<TemplateProperties> Templates = default(List<TemplateProperties>))
        {
            this.Components = Components;
            this.IsStandalone = IsStandalone;
            this.BrandId = BrandId;
            this.Templates = Templates;
        }
        
        /// <summary>
        /// Key/value dictionary of components that represent the form
        /// </summary>
        /// <value>Key/value dictionary of components that represent the form</value>
        [DataMember(Name="components", EmitDefaultValue=false)]
        public Dictionary<string, Dictionary<string, Object>> Components { get; set; }
        /// <summary>
        /// Gets or Sets IsStandalone
        /// </summary>
        [DataMember(Name="isStandalone", EmitDefaultValue=false)]
        public bool? IsStandalone { get; set; }
        /// <summary>
        /// Gets or Sets BrandId
        /// </summary>
        [DataMember(Name="brandId", EmitDefaultValue=false)]
        public string BrandId { get; set; }
        /// <summary>
        /// Optional template information that will be used to seed the form.
        /// </summary>
        /// <value>Optional template information that will be used to seed the form.</value>
        [DataMember(Name="templates", EmitDefaultValue=false)]
        public List<TemplateProperties> Templates { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebFormContent {\n");
            sb.Append("  Components: ").Append(Components).Append("\n");
            sb.Append("  IsStandalone: ").Append(IsStandalone).Append("\n");
            sb.Append("  BrandId: ").Append(BrandId).Append("\n");
            sb.Append("  Templates: ").Append(Templates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as WebFormContent);
        }

        /// <summary>
        /// Returns true if WebFormContent instances are equal
        /// </summary>
        /// <param name="other">Instance of WebFormContent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebFormContent other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Components == other.Components ||
                    this.Components != null &&
                    this.Components.SequenceEqual(other.Components)
                ) && 
                (
                    this.IsStandalone == other.IsStandalone ||
                    this.IsStandalone != null &&
                    this.IsStandalone.Equals(other.IsStandalone)
                ) && 
                (
                    this.BrandId == other.BrandId ||
                    this.BrandId != null &&
                    this.BrandId.Equals(other.BrandId)
                ) && 
                (
                    this.Templates == other.Templates ||
                    this.Templates != null &&
                    this.Templates.SequenceEqual(other.Templates)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Components != null)
                    hash = hash * 59 + this.Components.GetHashCode();
                if (this.IsStandalone != null)
                    hash = hash * 59 + this.IsStandalone.GetHashCode();
                if (this.BrandId != null)
                    hash = hash * 59 + this.BrandId.GetHashCode();
                if (this.Templates != null)
                    hash = hash * 59 + this.Templates.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
