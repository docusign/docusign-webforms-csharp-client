/* 
 * Web Forms API version 1.1
 *
 * The Web Forms API facilitates generating semantic HTML forms around everyday contracts. 
 *
 * OpenAPI spec version: 1.1.0
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.WebForms.Model
{
    /// <summary>
    /// Request body containing properties that will be used to create instance.
    /// </summary>
    [DataContract]
    public partial class CreateInstanceRequestBody :  IEquatable<CreateInstanceRequestBody>, IValidatableObject
    {
        public CreateInstanceRequestBody()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Gets or Sets AuthenticationMethod
        /// </summary>
        [DataMember(Name="authenticationMethod", EmitDefaultValue=false)]
        public AuthenticationMethod? AuthenticationMethod { get; set; }
        /// <summary>
        /// Gets or Sets SendOption
        /// </summary>
        [DataMember(Name="sendOption", EmitDefaultValue=false)]
        public SendOption? SendOption { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateInstanceRequestBody" /> class.
        /// </summary>
        /// <param name="FormValues">FormValues.</param>
        /// <param name="ClientUserId">ClientUserId.</param>
        /// <param name="AuthenticationInstant">AuthenticationInstant.</param>
        /// <param name="AuthenticationMethod">AuthenticationMethod.</param>
        /// <param name="AssertionId">AssertionId.</param>
        /// <param name="SecurityDomain">SecurityDomain.</param>
        /// <param name="ReturnUrl">ReturnUrl.</param>
        /// <param name="ExpirationOffset">ExpirationOffset.</param>
        /// <param name="SendOption">SendOption.</param>
        /// <param name="Recipients">The recipients who will receive the form in email.</param>
        /// <param name="Tags">List of tags provided by the user with each request. This field is optional..</param>
        public CreateInstanceRequestBody(WebFormValues FormValues = default(WebFormValues), string ClientUserId = default(string), string AuthenticationInstant = default(string), AuthenticationMethod? AuthenticationMethod = default(AuthenticationMethod?), string AssertionId = default(string), string SecurityDomain = default(string), string ReturnUrl = default(string), long? ExpirationOffset = default(long?), SendOption? SendOption = default(SendOption?), List<CreateInstanceRequestBodyRecipients> Recipients = default(List<CreateInstanceRequestBodyRecipients>), List<string> Tags = default(List<string>))
        {
            this.FormValues = FormValues;
            this.ClientUserId = ClientUserId;
            this.AuthenticationInstant = AuthenticationInstant;
            this.AuthenticationMethod = AuthenticationMethod;
            this.AssertionId = AssertionId;
            this.SecurityDomain = SecurityDomain;
            this.ReturnUrl = ReturnUrl;
            this.ExpirationOffset = ExpirationOffset;
            this.SendOption = SendOption;
            this.Recipients = Recipients;
            this.Tags = Tags;
        }
        
        /// <summary>
        /// Gets or Sets FormValues
        /// </summary>
        [DataMember(Name="formValues", EmitDefaultValue=false)]
        public WebFormValues FormValues { get; set; }
        /// <summary>
        /// Gets or Sets ClientUserId
        /// </summary>
        [DataMember(Name="clientUserId", EmitDefaultValue=false)]
        public string ClientUserId { get; set; }
        /// <summary>
        /// Gets or Sets AuthenticationInstant
        /// </summary>
        [DataMember(Name="authenticationInstant", EmitDefaultValue=false)]
        public string AuthenticationInstant { get; set; }
        /// <summary>
        /// Gets or Sets AssertionId
        /// </summary>
        [DataMember(Name="assertionId", EmitDefaultValue=false)]
        public string AssertionId { get; set; }
        /// <summary>
        /// Gets or Sets SecurityDomain
        /// </summary>
        [DataMember(Name="securityDomain", EmitDefaultValue=false)]
        public string SecurityDomain { get; set; }
        /// <summary>
        /// Gets or Sets ReturnUrl
        /// </summary>
        [DataMember(Name="returnUrl", EmitDefaultValue=false)]
        public string ReturnUrl { get; set; }
        /// <summary>
        /// Gets or Sets ExpirationOffset
        /// </summary>
        [DataMember(Name="expirationOffset", EmitDefaultValue=false)]
        public long? ExpirationOffset { get; set; }
        /// <summary>
        /// The recipients who will receive the form in email
        /// </summary>
        /// <value>The recipients who will receive the form in email</value>
        [DataMember(Name="recipients", EmitDefaultValue=false)]
        public List<CreateInstanceRequestBodyRecipients> Recipients { get; set; }
        /// <summary>
        /// List of tags provided by the user with each request. This field is optional.
        /// </summary>
        /// <value>List of tags provided by the user with each request. This field is optional.</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateInstanceRequestBody {\n");
            sb.Append("  FormValues: ").Append(FormValues).Append("\n");
            sb.Append("  ClientUserId: ").Append(ClientUserId).Append("\n");
            sb.Append("  AuthenticationInstant: ").Append(AuthenticationInstant).Append("\n");
            sb.Append("  AuthenticationMethod: ").Append(AuthenticationMethod).Append("\n");
            sb.Append("  AssertionId: ").Append(AssertionId).Append("\n");
            sb.Append("  SecurityDomain: ").Append(SecurityDomain).Append("\n");
            sb.Append("  ReturnUrl: ").Append(ReturnUrl).Append("\n");
            sb.Append("  ExpirationOffset: ").Append(ExpirationOffset).Append("\n");
            sb.Append("  SendOption: ").Append(SendOption).Append("\n");
            sb.Append("  Recipients: ").Append(Recipients).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CreateInstanceRequestBody);
        }

        /// <summary>
        /// Returns true if CreateInstanceRequestBody instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateInstanceRequestBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateInstanceRequestBody other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.FormValues == other.FormValues ||
                    this.FormValues != null &&
                    this.FormValues.Equals(other.FormValues)
                ) && 
                (
                    this.ClientUserId == other.ClientUserId ||
                    this.ClientUserId != null &&
                    this.ClientUserId.Equals(other.ClientUserId)
                ) && 
                (
                    this.AuthenticationInstant == other.AuthenticationInstant ||
                    this.AuthenticationInstant != null &&
                    this.AuthenticationInstant.Equals(other.AuthenticationInstant)
                ) && 
                (
                    this.AuthenticationMethod == other.AuthenticationMethod ||
                    this.AuthenticationMethod != null &&
                    this.AuthenticationMethod.Equals(other.AuthenticationMethod)
                ) && 
                (
                    this.AssertionId == other.AssertionId ||
                    this.AssertionId != null &&
                    this.AssertionId.Equals(other.AssertionId)
                ) && 
                (
                    this.SecurityDomain == other.SecurityDomain ||
                    this.SecurityDomain != null &&
                    this.SecurityDomain.Equals(other.SecurityDomain)
                ) && 
                (
                    this.ReturnUrl == other.ReturnUrl ||
                    this.ReturnUrl != null &&
                    this.ReturnUrl.Equals(other.ReturnUrl)
                ) && 
                (
                    this.ExpirationOffset == other.ExpirationOffset ||
                    this.ExpirationOffset != null &&
                    this.ExpirationOffset.Equals(other.ExpirationOffset)
                ) && 
                (
                    this.SendOption == other.SendOption ||
                    this.SendOption != null &&
                    this.SendOption.Equals(other.SendOption)
                ) && 
                (
                    this.Recipients == other.Recipients ||
                    this.Recipients != null &&
                    this.Recipients.SequenceEqual(other.Recipients)
                ) && 
                (
                    this.Tags == other.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(other.Tags)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.FormValues != null)
                    hash = hash * 59 + this.FormValues.GetHashCode();
                if (this.ClientUserId != null)
                    hash = hash * 59 + this.ClientUserId.GetHashCode();
                if (this.AuthenticationInstant != null)
                    hash = hash * 59 + this.AuthenticationInstant.GetHashCode();
                if (this.AuthenticationMethod != null)
                    hash = hash * 59 + this.AuthenticationMethod.GetHashCode();
                if (this.AssertionId != null)
                    hash = hash * 59 + this.AssertionId.GetHashCode();
                if (this.SecurityDomain != null)
                    hash = hash * 59 + this.SecurityDomain.GetHashCode();
                if (this.ReturnUrl != null)
                    hash = hash * 59 + this.ReturnUrl.GetHashCode();
                if (this.ExpirationOffset != null)
                    hash = hash * 59 + this.ExpirationOffset.GetHashCode();
                if (this.SendOption != null)
                    hash = hash * 59 + this.SendOption.GetHashCode();
                if (this.Recipients != null)
                    hash = hash * 59 + this.Recipients.GetHashCode();
                if (this.Tags != null)
                    hash = hash * 59 + this.Tags.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
